#include <iostream>
#include<vector>
#include <queue>
using namespace std;
int N,M;
int map[101][101];
int visited[101][101];
int counting[101][101];

int direction_x[]={0,-1,0,1};
int direction_y[]={-1,0,1,0};

queue<pair<int,int>>q;

void BFS(int x,int y) {
	counting[x][y]++;
	q.push(make_pair(x,y));
    visited[x][y] = 1;
 
    while (!q.empty()) {
    	int x1=q.front().first;
    	int y1=q.front().second;
        q.pop();
        for(int i=0; i<4; i++){
			int nx=x1+direction_x[i];
			int ny=y1+direction_y[i];
			if(x>-1&&y>-1&&x<N&&y<M &&visited[nx][ny]==0&&map[nx][ny]==1){
				visited[nx][ny]=1;
				q.push(make_pair(nx,ny));
				counting[nx][ny]=counting[x1][y1]+1;
			}
		}
	}
}

int main(){
	cin>>N>>M;
	for(int i=0; i<N; i++){
		for(int j=0; j<M; j++){
			scanf("%1d",&map[i][j]);
		}
	}
	BFS(0,0);
	cout<<counting[N-1][M-1]<<endl;
	return 0;
}
