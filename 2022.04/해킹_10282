#include<bits/stdc++.h>
using namespace std;
#define INF 1e9
int d[10001];
int cnt=0;
vector<pair<int,int> > graph[10001];

void dijkstra(int start){
	priority_queue<pair<int,int> > pq;
	pq.push({0,start});
	d[start]=0;
	while(!pq.empty()){
		int dist=-pq.top().first;
		int now=pq.top().second;
		pq.pop();
		if(d[now]<dist) continue;
		for(int i=0; i<graph[now].size(); i++){
			int cost=dist+graph[now][i].second;
			if(cost<d[graph[now][i].first]){
				d[graph[now][i].first]=cost;
				pq.push(make_pair(-cost,graph[now][i].first));
			}
		}
	}
}

int main(void){
	int T;
	cin>>T;
	while(T--){
		int V,E,start;
		cin>>V>>E>>start;
		for (int i = 0; i <= V; i++) {
			graph[i].clear();
			d[i] = INF;
			
		}
		int max=-1242142;
		cnt=0;
		for(int i=0; i<E; i++){
			int a,b,c;
			cin>>a>>b>>c;
			graph[b].push_back({a,c});
		}
		dijkstra(start);
		for(int i=1; i<=V; i++){
			if(d[i]!=INF){
				cnt++;
				if(d[i]>max){
					max=d[i];
				}
			}
		}
		cout<<cnt<<' '<<max<<endl;
	}
}




