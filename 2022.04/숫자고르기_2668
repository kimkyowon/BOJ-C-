//이 문제는 1~N까지 DFS를 돌려 처음 시작한 노드와 탐색이 끝나는 시점에서 마지막 노드가 동일하면
//해당 원소를 넣어주는 방식으로 풀었습니다. 백준의 예제로 설명을 하자면 
//1 2 3 4 5 6 7
//3 1 1 5 5 4 6
//이므로 1을 탐색해보면 1->3->1으로(처음 시작과 끝 노드가 동일) (1,3) (3,1)두 배열이 동일해지므로 가능합니다.

#include<bits/stdc++.h>
using namespace std;

int n,result_index;
int arr[101],visited[101],result[101];

void dfs(int start,int num){ 
	if(visited[start]){ //이미 방문이 이루어졌던 수라면 
		if(start==num){ //순환 즉 1에서 시작했으면 1로 끝나는지 보고 
			result[result_index++]=num; //결과배열에 추가 
		}
	}
	else{
		visited[start]=1; //방문 안했으면 방문처리해주고 
		dfs(arr[start],num); //dfs 재귀적으로 탐색 
	}
}
int main(){
	cin>>n;
	for(int i=1; i<=n; i++){
		cin>>arr[i];
	}
	for(int i=1; i<=n; i++){
		memset(visited,0,sizeof(visited));
		dfs(i,i);
	}
	cout<<result_index<<endl;
	for(int i=0; i<result_index; i++){
		cout<<result[i]<<endl;
	}
}
