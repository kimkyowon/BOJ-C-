#include<bits/stdc++.h>
#define max_int 21 // N의 최대 수
#define max_val 401 // 최대 시간
using namespace std;

int n, a[max_int][max_int], check[max_int][max_int], shark_x, shark_y, eat_cnt, shark_size = 2;
int min_dist, min_x, min_y, result;

int dx[] = {0, 0, 1, -1}; //상 하 좌 우
int dy[] = {-1, 1, 0, 0};

struct info{ //구조체를 통해 x좌표 y좌표 설정.
    int x, y;
};

void init_check(){ //bfs를 n^n번 탐색하기 위해 초기화 해주는 함수
    min_dist = max_val; 
    min_x = max_int;
    min_y = max_int;
    
    for(int i=1; i<=n; i++){
        for(int j=1; j<=n; j++){
            check[i][j] = -1;
        }
    }
}

void bfs(int x,int y){
	queue<info>q; //q 선언
	check[x][y]=0; //상어의 시작 지점은 거리 0
	q.push({x,y}); //시작 좌표를 q에 삽입
	
	while(!q.empty()){ //q가 빌 때 까지
		info now=q.front();
		q.pop();
		int x=now.x; // q에서 꺼낸 x좌표
		int y=now.y;// q에서 꺼낸 y좌표
		
		for(int i=0; i<4; i++){ //상,하,좌,우 이동했을때의 x좌표와 y좌표
			int nx= x+dx[i];
			int ny= y+dy[i];
			
			if(nx < 1 || nx > n || ny < 1 || ny > n) continue; //범위를 벗어나면 스킵.
			if(check[nx][ny] != -1 || a[nx][ny] > shark_size) continue; //방문한적이 있거나 상어 크기보다 크면 스킵.
			check[nx][ny] = check[x][y] + 1; //상하좌우 이동한 좌표에 현재까지의 시간 + 지금 한 번 이동한 것을 더해줌.
			if(a[nx][ny] != 0 && a[nx][ny] < shark_size){ //좌표의 값이 0이 아니면서 상어 사이즈보다 작으면 상어가 먹을 수 있는 물고기 위치이므로
				if(min_dist > check[nx][ny]){ // 지금 경로가 최단 거리보다 짧으면
                    min_x = nx; // 최단 경로의 x좌표 갱신
                    min_y = ny; // 최단 경로의 y좌표 갱신
                    min_dist = check[nx][ny]; //최단 경로의 시간 갱신
                }
                else if(min_dist == check[nx][ny]){ //최단 경로의 시간과 동일하다면 즉 동일한 거리가 나온다면
                    if(min_x == nx){ // x좌표값이 같을경우에는
                        if(min_y > ny){ // y좌표 값이 작은 쪽을 갱신(왼쪽을 우선시 하기로 했으므로)
                            min_x = nx;
                            min_y = ny;
                        }
                    }else if(min_x > nx){ //x좌표 값이 다르면 작은 쪽을 갱신(왼쪽을 우선시 하기로 했으므로)
                        min_x = nx;
                        min_y = ny;
                    }
                }
            }
            q.push({nx, ny}); //q에 삽입
        }
    }
}

int main(){
	scanf("%d",&n);
	for(int i=1; i<=n; i++){
        for(int j=1; j<=n; j++){
            scanf("%d", &a[i][j]);
            if(a[i][j]==9){ //9값이면 아기 상어의 위치
            	shark_x = i; //아기 상어의 x좌표
                shark_y = j; // 아기 상어의 y좌표
				a[i][j] = 0; //0으로 해서 건널 수 있도록 함
            }
        }
    }
	while(true){
		init_check();
		bfs(shark_x, shark_y);
		if(min_x != max_int && min_y != max_int){ //값이 변경된 경우
			result += check[min_x][min_y];
			eat_cnt++; //eat_cnt는 지금까지 먹은 물고기 수를 의미함.
			if(eat_cnt==shark_size){ //상어 사이즈와 먹은 마리수가 동일하게 되면
				shark_size++; //상어 사이즈 1 증가
				eat_cnt=0; //먹은 마리 수 초기화
			}
			a[min_x][min_y]=0; //먹었으므로 0으로 바꾸기
			shark_x=min_x; //먹으러 갔으므로 상어의 현재 x좌표 갱신
			shark_y=min_y; // 먹으러 갔으므로 상어의 현재 y좌표 갱신
		}
		else{
			break;
		}
	}
	printf("%d\n",result);
}
